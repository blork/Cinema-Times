name: Scrape Cinema Times

on:
  # Run automatically every 6 hours
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run on pushes to master (for testing)
  push:
    branches: [ master ]

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  scrape-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run cinema scraper with RT scores
      env:
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
      run: |
        echo "ðŸŽ­ Starting cinema scraper..."
        python scraper.py
        echo "âœ… Scraping complete"
        
    - name: Display scraping results
      run: |
        echo "ðŸ“Š Scraping Statistics:"
        echo "JSON file size: $(wc -c < cinema-times.json) bytes"
        echo "Number of showings: $(jq '.showings | length' cinema-times.json)"
        echo "Unique movies: $(jq '.showings | map(.title) | unique | length' cinema-times.json)"
        echo "Last updated: $(jq -r '.last_updated' cinema-times.json)"
        echo ""
        echo "ðŸ“¬ New films notification:"
        cat new-films.txt
        
    # - name: Send Pushover notification for new films
    #   if: ${{ hashFiles('new-films.txt') != '' }}
    #   run: |
    #     # Check if there are actually new films
    #     if ! grep -q "No new films detected" new-films.txt; then
    #       # Count new films
    #       NEW_FILM_COUNT=$(grep -c "^â€¢" new-films.txt || echo "0")
    #       
    #       # Create message with proper newlines for Pushover
    #       echo "ðŸŽ¬ ${NEW_FILM_COUNT} new films at The Light Cinema!" > message.txt
    #       echo "" >> message.txt
    #       
    #       # Add first 3 films to message
    #       grep "^â€¢" new-films.txt | head -3 | sed 's/^â€¢ //' >> message.txt
    #       
    #       # Add "and X more" if there are more than 3 films
    #       if [ "$NEW_FILM_COUNT" -gt 3 ]; then
    #         echo "" >> message.txt
    #         echo "...and $((NEW_FILM_COUNT - 3)) more" >> message.txt
    #       fi
    #       
    #       # Send to Pushover using file for message body
    #       curl -s \
    #         --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
    #         --form-string "user=${{ secrets.PUSHOVER_USER }}" \
    #         --form-string "title=ðŸŽ¬ New Cinema Films" \
    #         --form "message=<message.txt" \
    #         --form-string "url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" \
    #         --form-string "url_title=View Showtimes" \
    #         --form-string "priority=0" \
    #         --form-string "sound=pushover" \
    #         https://api.pushover.net/1/messages.json
    #       
    #       # Show what we sent
    #       echo "ðŸ“± Pushover notification sent:"
    #       cat message.txt
    #     else
    #       echo "ðŸ“± No new films to notify about"
    #     fi
    
    - name: Notifications disabled temporarily
      run: |
        echo "ðŸ“± Pushover notifications are temporarily disabled"
        echo "ðŸ“¬ New films file contents:"
        cat new-films.txt
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

  deploy:
    needs: scrape-and-build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4